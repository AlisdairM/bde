// s_baltst_mysequencewithdecimalattribute.cpp *DO NOT EDIT* @generated -*-C++-*-

#include <bsls_ident.h>
BSLS_IDENT_RCSID(s_baltst_mysequencewithdecimalattribute_cpp, "$Id$ $CSID$")

#include <s_baltst_mysequencewithdecimalattribute.h>

#include <bdlat_formattingmode.h>
#include <bdlat_valuetypefunctions.h>
#include <bdlb_print.h>
#include <bdlb_printmethods.h>
#include <bdlb_string.h>

#include <bdlb_nullablevalue.h>
#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_cstring.h>
#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>
#include <bsl_utility.h>

namespace BloombergLP {
namespace s_baltst {

                    // ------------------------------------
                    // class MySequenceWithDecimalAttribute
                    // ------------------------------------

// CONSTANTS

const char MySequenceWithDecimalAttribute::CLASS_NAME[] = "MySequenceWithDecimalAttribute";

const bdlat_AttributeInfo MySequenceWithDecimalAttribute::ATTRIBUTE_INFO_ARRAY[] = {
    {
        ATTRIBUTE_ID_ATTRIBUTE1,
        "attribute1",
        sizeof("attribute1") - 1,
        "",
        bdlat_FormattingMode::e_DEC
      | bdlat_FormattingMode::e_ATTRIBUTE
    }
};

// CLASS METHODS

const bdlat_AttributeInfo *MySequenceWithDecimalAttribute::lookupAttributeInfo(
        const char *name,
        int         nameLength)
{
    for (int i = 0; i < 1; ++i) {
        const bdlat_AttributeInfo& attributeInfo =
                    MySequenceWithDecimalAttribute::ATTRIBUTE_INFO_ARRAY[i];

        if (nameLength == attributeInfo.d_nameLength
        &&  0 == bsl::memcmp(attributeInfo.d_name_p, name, nameLength))
        {
            return &attributeInfo;
        }
    }

    return 0;
}

const bdlat_AttributeInfo *MySequenceWithDecimalAttribute::lookupAttributeInfo(int id)
{
    switch (id) {
      case ATTRIBUTE_ID_ATTRIBUTE1:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_ATTRIBUTE1];
      default:
        return 0;
    }
}

// CREATORS

MySequenceWithDecimalAttribute::MySequenceWithDecimalAttribute()
: d_attribute1()
{
}

// MANIPULATORS

void MySequenceWithDecimalAttribute::reset()
{
    bdlat_ValueTypeFunctions::reset(&d_attribute1);
}

// ACCESSORS

bsl::ostream& MySequenceWithDecimalAttribute::print(
                                            bsl::ostream& stream,
                                            int           level,
                                            int           spacesPerLevel) const
{
    bslim::Printer printer(&stream, level, spacesPerLevel);
    printer.start();
    printer.printAttribute("attribute1", this->attribute1());
    printer.end();
    return stream;
}


}  // close package namespace
}  // close enterprise namespace

// GENERATED BY BLP_BAS_CODEGEN_2025.08.21
// USING bas_codegen.pl s_baltst_mysequencewithdecimalattribute.xsd --mode msg --includedir . --msgComponent mysequencewithdecimalattribute --noRecurse --noExternalization --noHashSupport --noAggregateConversion
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright 2025 Bloomberg Finance L.P. All rights reserved.
//      Property of Bloomberg Finance L.P. (BFLP)
//      This software is made available solely pursuant to the
//      terms of a BFLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------
