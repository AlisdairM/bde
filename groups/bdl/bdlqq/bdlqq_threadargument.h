// bdlqq_threadargument.h                                             -*-C++-*-
#ifndef INCLUDED_BDLQQ_THREADARGUMENT
#define INCLUDED_BDLQQ_THREADARGUMENT

#ifndef INCLUDED_BSLS_IDENT
#include <bsls_ident.h>
#endif
BSLS_IDENT("$: $")

//@PURPOSE: Provide types and utilities to simplify thread creation.
//
//@CLASSES:
//  ThreadArgument: A template for managing an object, allocator, and invoker.
//
//@AUTHOR: David Schumann (dschumann1)
//
//@DESCRIPTION: This component defines a type, 'ThreadArgument', that contains
// a single instance of a parameterized type along with an allocator to manage
// it and a pointer to a function to operate on it.
//
// It simplifies the need to dynamically allocate a copy of an object and store
// the allocator used alongside the object.  The allocator is passed through
// to the copy constructor of the contained object if its type has traits
// indicating it uses 'bslma::Allocator'.  By including a function pointer, all
// the data needed to start a thread can be co-located in one dynamically
// allocated object.
//
// This component also provides a C-linkage function
// 'bdlqq_ThreadArgument_invoker' that invokes the function held within its
// ThreadArgument argument.  This function is suitable as an entry point for
// thread creation.


#ifndef INCLUDED_BSLSCM_VERSION
#include <bslscm_version.h>
#endif

#ifndef INCLUDED_BSLALG_CONSTRUCTORPROXY
#include <bslalg_constructorproxy.h>
#endif

namespace BloombergLP {

extern "C" {

void *bdlqq_ThreadArgument_invoker(void* argument);
    // Interpreting the specified 'argument' as a 'ThreadArgument_Base*',
    // invoke 'argument->function()(argument)'.  Return 0.

}

namespace bdlqq {

class ThreadArgument_Base {
    // This component-private type provides a non-templated view of
    // 'ThreadArgument' for accessing the invoker function.  Do not use
    // outside this component.

  public:
    // PUBLIC TYPES
    typedef void (*InvokerFunction)(void*);
        // 'InvokerFunction' is an alias for a for the type of function
        // pointer held in a ThreadArgument.  When used in
        // 'bdlqq_ThreadArgument_invoker', the function is expected to
        // interpret its argument as a pointer to 'ThreadArgument<TYPE>'.

  private:
    InvokerFunction d_function; // Function to operate on template object

  protected:
    // CREATORS
    explicit ThreadArgument_Base(InvokerFunction function);
        // Create a new object holding the specified 'function'.

  public:
    // ACCESSORS
    InvokerFunction function() const;
        // Return the function supplied at construction.
};


template <typename TYPE>
class ThreadArgument : public ThreadArgument_Base {
    // Hold a copy of an instance of parameterized type, along with the
    // allocator used to manage the copy.  'TYPE' shall have a copy
    // constructor, and declare the 'bslma::UsesBslmaAllocator' trait if it
    // uses 'bslma::Allocator' as an argument to its copy constructor.

    // DATA
    bslalg::ConstructorProxy<TYPE>  d_object;
    bslma::Allocator               *d_allocator_p;

  public:
    // CREATORS
    ThreadArgument(const TYPE&       other,
                   InvokerFunction   function,
                   bslma::Allocator *allocator);
        // Create a new managed object holding a new instance of the specified
        // 'other' value along with the specified 'function' and using the
        // specified 'allocator' to manage memory.  Note that by convention,
        // 'function' is expected to interpret its argument as a
        // 'ThreadArgument<TYPE>*', operate on it in some way, and deallocate
        // it using 'allocator'.

    // ~ThreadArgument() = default;
        // Destroy this object and the underlying managed object.  Note that
        // this destructor is generated by the compiler.

    // ACCESSORS
    bslma::Allocator* allocator() const;
        // Return the allocator supplied at construction.

    TYPE* object() const;
        // Return the address of the managed object.
};

// ============================================================================
//                               INLINE DEFINITIONS
// ============================================================================

                        // -------------------
                        // class ThreadArgument
                        // -------------------
// CREATORS
inline ThreadArgument_Base::ThreadArgument_Base(InvokerFunction function)
: d_function(function)
{}

// ACCESSORS
inline ThreadArgument_Base::InvokerFunction
ThreadArgument_Base::function() const {
    return d_function;
}

                        // -------------------
                        // class ThreadArgument
                        // -------------------

// CREATORS
template <typename TYPE>
inline
ThreadArgument<TYPE>::ThreadArgument(const TYPE&       other,
                                     InvokerFunction   function,
                                     bslma::Allocator *allocator)
: ThreadArgument_Base(function)
, d_object(other, allocator)
, d_allocator_p(allocator)
{}

// ACCESSORS
template <typename TYPE>
inline
bslma::Allocator* ThreadArgument<TYPE>::allocator() const {
    return d_allocator_p;
}

template <typename TYPE>
inline
TYPE* ThreadArgument<TYPE>::object() const {
    return const_cast<TYPE*>(&d_object.object());
}

}  // close package namespace
}  // close enterprise namespace

#endif

// ----------------------------------------------------------------------------
// Copyright 2015 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------


