// bslfmt_formatargs_cpp03.h                                          -*-C++-*-

// Automatically generated file.  **DO NOT EDIT**

#ifndef INCLUDED_BSLFMT_FORMATARGS_CPP03
#define INCLUDED_BSLFMT_FORMATARGS_CPP03

//@PURPOSE: Provide C++03 implementation for bslfmt_formatargs.h
//
//@CLASSES: See bslfmt_formatargs.h for list of classes
//
//@SEE_ALSO: bslfmt_formatargs
//
//@DESCRIPTION:  This component is the C++03 translation of a C++11 component,
// generated by the 'sim_cpp11_features.pl' program.  If the original header
// contains any specially delimited regions of C++11 code, then this generated
// file contains the C++03 equivalent, i.e., with variadic templates expanded
// and rvalue-references replaced by 'bslmf::MovableRef' objects.  The header
// code in this file is designed to be '#include'd into the original header
// when compiling with a C++03 compiler.  If there are no specially delimited
// regions of C++11 code, then this header contains no code and is not
// '#include'd in the original header.
//
// Generated on Thu Jul  4 12:17:34 2024
// Command line: sim_cpp11_features.pl bslfmt_formatargs.h

#ifdef COMPILING_BSLFMT_FORMATARGS_H

namespace BloombergLP {
namespace bslfmt {

// FORWARD DECLARATIONS

template <class t_OUT, class t_CHAR>
class basic_format_context;

template <class t_CONTEXT>
class basic_format_args;

template <class t_VALUE>
class Format_OutputIteratorRef;

// TYPEDEFS

typedef basic_format_context<Format_OutputIteratorRef<char>, char>
    format_context;

typedef basic_format_context<Format_OutputIteratorRef<wchar_t>, wchar_t>
    wformat_context;

typedef basic_format_args<format_context> format_args;

typedef basic_format_args<wformat_context> wformat_args;

                 // ------------------------------------------
                 // class Format_FormatArgStore<t_OUT, T_CHAR>
                 // ------------------------------------------


#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatargs.h
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT_A
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT_A BSLFMT_FORMATARGS_VARIADIC_LIMIT
#endif
template <class t_CONTEXT
#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0
        , class t_ARGS_0 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1
        , class t_ARGS_1 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2
        , class t_ARGS_2 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3
        , class t_ARGS_3 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4
        , class t_ARGS_4 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5
        , class t_ARGS_5 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6
        , class t_ARGS_6 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7
        , class t_ARGS_7 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8
        , class t_ARGS_8 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
        , class t_ARGS_9 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
        , class = BSLS_COMPILERFEATURES_NILT>
class Format_FormatArgStore;

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0
template <class t_CONTEXT>
class Format_FormatArgStore<t_CONTEXT> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT>
    friend Format_FormatArgStore<t_INNER_CONTEXT>
        Format_MakeFormatArgs();

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  0u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1
template <class t_CONTEXT, class t_ARGS_01>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  1u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  2u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  3u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  4u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  5u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  6u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  7u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  8u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08,
                                     class t_INNER_ARGS_09>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08,
                                                  t_INNER_ARGS_09>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08,
                              t_INNER_ARGS_09& fmt_args_09);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  9u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08,
                                     class t_INNER_ARGS_09,
                                     class t_INNER_ARGS_10>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08,
                                                  t_INNER_ARGS_09,
                                                  t_INNER_ARGS_10>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08,
                              t_INNER_ARGS_09& fmt_args_09,
                              t_INNER_ARGS_10& fmt_args_10);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, 10u>& args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10



#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0
template <class t_CONTEXT>
Format_FormatArgStore<t_CONTEXT> Format_MakeFormatArgs(
                                                          );
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1
template <class t_CONTEXT, class t_ARGS_01>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0
Format_FormatArgStore<format_context> make_format_args(
                                                          );
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
Format_FormatArgStore<format_context, t_ARGS_01> make_format_args(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09,
                                      t_ARGS_10> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0
Format_FormatArgStore<wformat_context> make_wformat_args(
                                                          );
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
Format_FormatArgStore<wformat_context, t_ARGS_01> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_A >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT, class... t_ARGS>
class Format_FormatArgStore {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class... t_INNER_ARGS>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS...>
        Format_MakeFormatArgs(t_INNER_ARGS&... fmt_args);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)>& args)
        BSLS_KEYWORD_NOEXCEPT;
};


template <class t_CONTEXT, class... t_ARGS>
Format_FormatArgStore<t_CONTEXT, t_ARGS...> Format_MakeFormatArgs(
                                                          t_ARGS&... fmt_args);

template <class... t_ARGS>
Format_FormatArgStore<format_context, t_ARGS...> make_format_args(
                                                          t_ARGS&... fmt_args);

template <class... t_ARGS>
Format_FormatArgStore<wformat_context, t_ARGS...> make_wformat_args(
                                                          t_ARGS&... fmt_args);
// }}} END GENERATED CODE
#endif


                     // ----------------------------------
                     // class basic_format_args<t_CONTEXT>
                     // ----------------------------------


template <class t_CONTEXT>
class basic_format_args {
  private:
    // DATA
    size_t                             d_size;
    const basic_format_arg<t_CONTEXT> *d_data;

    // PRIVATE ACCESSORS
    size_t size() const;

    // FRIENDS
    template <class t_INNER_CONTEXT>
    friend size_t Format_FormatArgsSize(
                               const basic_format_args<t_INNER_CONTEXT>& args);

  public:
    // CREATORS
    basic_format_args() BSLS_KEYWORD_NOEXCEPT;

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatargs.h
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT_B
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT_B BSLFMT_FORMATARGS_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 0
    basic_format_args(const Format_FormatArgStore<t_CONTEXT>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 1
    template <class t_ARGS_01>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 2
    template <class t_ARGS_01,
              class t_ARGS_02>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 3
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 4
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 5
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 6
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 7
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 8
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 9
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08,
                                                             t_ARGS_09>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 10
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09,
              class t_ARGS_10>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08,
                                                             t_ARGS_09,
                                                             t_ARGS_10>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_B >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
    template <class... t_ARGS>
    basic_format_args(const Format_FormatArgStore<t_CONTEXT, t_ARGS...>& store)
        BSLS_KEYWORD_NOEXCEPT;
// }}} END GENERATED CODE
#endif

    // ACCESSORS
    basic_format_arg<t_CONTEXT> get(size_t i) const BSLS_KEYWORD_NOEXCEPT;
};

// FREE FUNCTIONS

template<class t_CONTEXT>
size_t Format_FormatArgsSize(const basic_format_args<t_CONTEXT>& args);
    // This component-private function returns the result of calling 'size()'
    // on the specified 'args' parameter. This is to permit access to the
    // private 'size' accessor of 'basic_format_args' without requiring long
    // distance friendship.


// ============================================================================
//                           INLINE DEFINITIONS
// ============================================================================

                 // ------------------------------------------
                 // class Format_FormatArgStore<t_OUT, T_CHAR>
                 // ------------------------------------------

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatargs.h
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT_C
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT_C BSLFMT_FORMATARGS_VARIADIC_LIMIT
#endif

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0
template <class t_CONTEXT>
Format_FormatArgStore<t_CONTEXT, BSLS_COMPILERFEATURES_FILLT(10)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  0u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1
template <class t_CONTEXT, class t_ARGS_01>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 BSLS_COMPILERFEATURES_FILLT( 9)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  1u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 BSLS_COMPILERFEATURES_FILLT( 8)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  2u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 BSLS_COMPILERFEATURES_FILLT( 7)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  3u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 BSLS_COMPILERFEATURES_FILLT( 6)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  4u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 BSLS_COMPILERFEATURES_FILLT( 5)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  5u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 BSLS_COMPILERFEATURES_FILLT( 4)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  6u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 BSLS_COMPILERFEATURES_FILLT( 3)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  7u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 BSLS_COMPILERFEATURES_FILLT( 2)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  8u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 BSLS_COMPILERFEATURES_FILLT( 1)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  9u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10,
                                 BSLS_COMPILERFEATURES_FILLT( 0)
                                 >::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, 10u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10



#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0
template <class t_CONTEXT>
Format_FormatArgStore<t_CONTEXT> Format_MakeFormatArgs(
                                                           )
{
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT>(&arg_array);
    return Format_FormatArgStore<t_CONTEXT>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1
template <class t_CONTEXT, class t_ARGS_01>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01>(&arg_array, fmt_args_01);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02>(&arg_array, fmt_args_01,
                                                                fmt_args_02);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08,
                                         t_ARGS_09>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08,
                                                                fmt_args_09);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10> Format_MakeFormatArgs(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09,
                                                        t_ARGS_10& fmt_args_10)
{
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08,
                                         t_ARGS_09,
                                         t_ARGS_10>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08,
                                                                fmt_args_09,
                                                                fmt_args_10);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09,
                                            t_ARGS_10>(arg_array);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10


#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0
Format_FormatArgStore<format_context> make_format_args(
                                                           )
{
    return Format_MakeFormatArgs<format_context>();
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1
template <class t_ARGS_01>
Format_FormatArgStore<format_context, t_ARGS_01> make_format_args(
                                                        t_ARGS_01& fmt_args_01)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08,
                                                 fmt_args_09);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09,
                                      t_ARGS_10> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09,
                                                        t_ARGS_10& fmt_args_10)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08,
                                                 fmt_args_09,
                                                 fmt_args_10);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10


#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0
Format_FormatArgStore<wformat_context> make_wformat_args(
                                                           )
{
    return Format_MakeFormatArgs<wformat_context>();
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1
template <class t_ARGS_01>
Format_FormatArgStore<wformat_context, t_ARGS_01> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08,
                                                  fmt_args_09);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09,
                                                        t_ARGS_10& fmt_args_10)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08,
                                                  fmt_args_09,
                                                  fmt_args_10);
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_C >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

template <class t_CONTEXT, class... t_ARGS>
Format_FormatArgStore<t_CONTEXT, t_ARGS...>::Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}


template <class t_CONTEXT, class... t_ARGS>
Format_FormatArgStore<t_CONTEXT, t_ARGS...> Format_MakeFormatArgs(
                                                           t_ARGS&... fmt_args)
{
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS...>(&arg_array, fmt_args...);
    return Format_FormatArgStore<t_CONTEXT, t_ARGS...>(arg_array);
}

template <class... t_ARGS>
Format_FormatArgStore<format_context, t_ARGS...> make_format_args(
                                                           t_ARGS&... fmt_args)
{
    return Format_MakeFormatArgs<format_context>(fmt_args...);
}

template <class... t_ARGS>
Format_FormatArgStore<wformat_context, t_ARGS...> make_wformat_args(
                                                           t_ARGS&... fmt_args)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args...);
}

// }}} END GENERATED CODE
#endif

                     // ----------------------------------
                     // class basic_format_args<t_CONTEXT>
                     // ----------------------------------



// CREATORS
template <class t_CONTEXT>
basic_format_args<t_CONTEXT>::basic_format_args() BSLS_KEYWORD_NOEXCEPT
    : d_size(0) {}

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatargs.h
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARGS_VARIADIC_LIMIT_D
#define BSLFMT_FORMATARGS_VARIADIC_LIMIT_D BSLFMT_FORMATARGS_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 0
template <class t_CONTEXT>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 0u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 1
template <class t_CONTEXT>
template <class t_ARGS_01>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 1u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 2
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 2u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 3
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 3u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 4
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 4u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 5
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 5u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 6
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 6u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 7
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 7u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 8
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 8u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 9
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08,
                                                             t_ARGS_09>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 9u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 10
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                             t_ARGS_02,
                                                             t_ARGS_03,
                                                             t_ARGS_04,
                                                             t_ARGS_05,
                                                             t_ARGS_06,
                                                             t_ARGS_07,
                                                             t_ARGS_08,
                                                             t_ARGS_09,
                                                             t_ARGS_10>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size(10u),
  d_data(store.d_args.data())
{
}
#endif  // BSLFMT_FORMATARGS_VARIADIC_LIMIT_D >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT>
template <class... t_ARGS>
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_FormatArgStore<t_CONTEXT, t_ARGS...>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size(sizeof...(t_ARGS)),
  d_data(store.d_args.data())
{
}
// }}} END GENERATED CODE
#endif

// ACCESSORS
template <class t_CONTEXT>
basic_format_arg<t_CONTEXT> basic_format_args<t_CONTEXT>::get(
                                          size_t i) const BSLS_KEYWORD_NOEXCEPT
{
    return i < d_size ? d_data[i] : basic_format_arg<t_CONTEXT>();
}


// PRIVATE ACCESSORS
template <class t_CONTEXT>
size_t basic_format_args<t_CONTEXT>::size() const
{
    return d_size;
}

// FREE FUNCTIONS

template <class t_CONTEXT>
size_t Format_FormatArgsSize(const basic_format_args<t_CONTEXT>& args)
{
    return args.size();
}

}  // close namespace bslfmt
} // close enterprise namespace

#else // if ! defined(DEFINED_BSLFMT_FORMATARGS_H)
# error Not valid except when included from bslfmt_formatargs.h
#endif // ! defined(COMPILING_BSLFMT_FORMATARGS_H)

#endif // ! defined(INCLUDED_BSLFMT_FORMATARGS_CPP03)

// ----------------------------------------------------------------------------
// Copyright 2023 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------
