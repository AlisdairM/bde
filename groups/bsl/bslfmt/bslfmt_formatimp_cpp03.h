// bslfmt_formatimp_cpp03.h                                           -*-C++-*-

// Automatically generated file.  **DO NOT EDIT**

#ifndef INCLUDED_BSLFMT_FORMATIMP_CPP03
#define INCLUDED_BSLFMT_FORMATIMP_CPP03

//@PURPOSE: Provide C++03 implementation for bslfmt_formatimp.h
//
//@CLASSES: See bslfmt_formatimp.h for list of classes
//
//@SEE_ALSO: bslfmt_formatimp
//
//@DESCRIPTION:  This component is the C++03 translation of a C++11 component,
// generated by the 'sim_cpp11_features.pl' program.  If the original header
// contains any specially delimited regions of C++11 code, then this generated
// file contains the C++03 equivalent, i.e., with variadic templates expanded
// and rvalue-references replaced by 'bslmf::MovableRef' objects.  The header
// code in this file is designed to be '#include'd into the original header
// when compiling with a C++03 compiler.  If there are no specially delimited
// regions of C++11 code, then this header contains no code and is not
// '#include'd in the original header.
//
// Generated on Fri Jul 12 17:43:03 2024
// Command line: sim_cpp11_features.pl bslfmt_formatimp.h

#ifdef COMPILING_BSLFMT_FORMATIMP_H

#if defined(BSLS_COMPILERFEATURES_SUPPORT_ALIAS_TEMPLATES) &&               \
    defined(BSLS_COMPILERFEATURES_SUPPORT_VARIADIC_TEMPLATES)
#  define BSLFMT_FORMAT_STRING_PARAMETER  bslfmt::format_string<t_ARGS...>
#  define BSLFMT_FORMAT_WSTRING_PARAMETER bslfmt::wformat_string<t_ARGS...>
#else
// We cannot define format_string<t_ARGS...> in a C++03 compliant manner, so
// have to use non-template versions instead.
#  define BSLFMT_FORMAT_STRING_PARAMETER bslfmt::format_string
#  define BSLFMT_FORMAT_WSTRING_PARAMETER bslfmt::wformat_string
#endif  // BSLS_LIBRARYFEATURES_HAS_CPP11_BASELINE_LIBRARY

namespace BloombergLP {
namespace bslfmt {

template <class t_ITERATOR, class t_VALUE_TYPE, class t_DIFF_TYPE>
class Format_TruncatingIterator {
  private:
    // TYPES
    typedef typename bsl::iterator_traits<t_ITERATOR>::difference_type DT;

    // DATA
    t_ITERATOR  d_iterator;
    t_DIFF_TYPE d_limit;
    t_DIFF_TYPE d_count;

  public:
    // TYPES
    typedef bsl::output_iterator_tag iterator_category;
    typedef t_DIFF_TYPE              difference_type;
    typedef t_VALUE_TYPE             value_type;
    typedef void                     reference;
    typedef void                     pointer;

    // CREATORS
    Format_TruncatingIterator(t_ITERATOR iterator, t_DIFF_TYPE limit)
    : d_iterator(iterator)
    , d_limit(limit)
    , d_count(0)
    {
    }

    // MANIPULATORS
    Format_TruncatingIterator& operator*()
    {
        return *this;
    }

    void operator=(t_VALUE_TYPE x)
    {
        if (d_count++ < d_limit) {
            *d_iterator = x;
            // We deliberately use prefix not postfix increment, as the postfix
            // increment operator returns by value which could cause issues
            // with counting or other stateful iterators.
            ++d_iterator;
        }
    }

    Format_TruncatingIterator& operator++()
    {
        return *this;
    }

    // ACCESSORS
    t_DIFF_TYPE count() const
    {
        return d_count;
    }

    t_ITERATOR underlying() const
    {
        return d_iterator;
    }
  private:
    // NOT IMPLEMENTED

    Format_TruncatingIterator operator++(int) BSLS_KEYWORD_DELETED;
        // The postfix operator must be deleted because, as a counting
        // iterator, return by value can cause data inconsistency.
};

#if defined(BSLS_LIBRARYFEATURES_HAS_CPP20_FORMAT)
using std::format_to_n_result;
#else
template <class t_OUT>
struct format_to_n_result {
    t_OUT                                                 out;
    typename bsl::iterator_traits<t_OUT>::difference_type size;
};
#endif

template <class t_OUT, class t_CHAR>
struct Format_FormatVisitor {
    basic_format_parse_context<t_CHAR>  *d_parseContext_p;
    basic_format_context<t_OUT, t_CHAR> *d_formatContext_p;

    Format_FormatVisitor(basic_format_parse_context<t_CHAR>&  pc,
                                basic_format_context<t_OUT, t_CHAR>& fc)
    : d_parseContext_p(&pc)
    , d_formatContext_p(&fc)
    {
    }

    typedef
        typename basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::handle
            handle;

    void operator()(bsl::monostate) const
    {
        BSLS_ASSERT(false);
        BSLS_THROW(format_error("This call should be impossible - arg uninitialized"));
    }

    void operator()(bool x) const
    {
        bsl::formatter<bool, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(t_CHAR x) const
    {
        bsl::formatter<t_CHAR, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(unsigned x) const
    {
        bsl::formatter<unsigned, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(long long x) const
    {
        bsl::formatter<long long, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(unsigned long long x) const
    {
        bsl::formatter<unsigned long long, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(float x) const
    {
        bsl::formatter<float, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(double x) const
    {
        bsl::formatter<double, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(long double x) const
    {
        bsl::formatter<long double, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(const t_CHAR *x) const
    {
        bsl::formatter<const t_CHAR *, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(const void *x) const
    {
        bsl::formatter<const void *, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(int x) const
    {
        bsl::formatter<int, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                               bsl::as_const(f).format(x, *d_formatContext_p));
    }

    void operator()(bsl::basic_string_view<t_CHAR> sv) const
    {
        bsl::formatter<bsl::basic_string_view<t_CHAR>, t_CHAR> f;
        d_parseContext_p->advance_to(f.parse(*d_parseContext_p));
        d_formatContext_p->advance_to(
                              bsl::as_const(f).format(sv, *d_formatContext_p));
    }

    void operator()(const handle& h) const
    {
        h.format(*d_parseContext_p, *d_formatContext_p);
    }
};

template <class t_OUT, class t_CHAR>
t_OUT Format_VFormatProcess(
         t_OUT&                                                         out,
         bsl::basic_string_view<t_CHAR>                                 fmtstr,
         const basic_format_args<basic_format_context<t_OUT, t_CHAR> >& args)
    // The actual meat of the implementation.
{
    const size_t argssize = Format_FormatArgs_ImpUtils::formatArgsSize(args);

    basic_format_parse_context<t_CHAR>  pc(fmtstr, argssize);
    basic_format_context<t_OUT, t_CHAR> fc(
                            Format_FormatContextFactory::construct(out, args));
    Format_FormatVisitor<t_OUT, t_CHAR> visitor(pc, fc);

    typename bsl::basic_string_view<t_CHAR>::iterator it = pc.begin();

    while (it != pc.end()) {
        if (*it == '{') {
            ++it;
            if (it == pc.end()) {
                BSLS_THROW(format_error("unmatched {"));
            }
            else if (*it == '{') {
                // literal {
                ++it;
                out    = fc.out();
                *out   = '{';
                ++out; // prefer prefix increment
                fc.advance_to(out);
                continue;
            }
            size_t id = -1;
            if (*it >= '0' && *it <= '9') {
                // numeric ID
                id = 0;
                while (it != pc.end() && *it >= '0' && *it <= '9') {
                    id = 10 * id + (*it - '0');
                    ++it;
                    if (id >= argssize) {
                        BSLS_THROW(format_error("arg id too large"));
                    }
                }
                if (it == pc.end()) {
                    BSLS_THROW(format_error("unmatched {"));
                }
            }
            if (id == size_t(-1)) {
                id = pc.next_arg_id();
            }
            else {
                pc.check_arg_id(id);
            }
            if (*it == ':') {
                ++it;
            }
            pc.advance_to(it);
            visit_format_arg(visitor, args.get(id));
            it = pc.begin();
            if (it != pc.end()) {
                // advance past the terminating }
                ++it;
            }
            out = fc.out();
        }
        else if (*it == '}') {
            // must be escaped
            ++it;
            if (it == pc.end() || *it != '}') {
                BSLS_THROW(format_error("} must be escaped"));
            }
            ++it;
            out    = fc.out();
            *out   = '}';
            ++out; // prefer prefix increment
            fc.advance_to(out);
        }
        else {
            // just copy it
            out    = fc.out();
            *out   = *it;
            ++out;
            ++it;
            fc.advance_to(out);
        }
    }
    return fc.out();
}

template <class t_CHAR>
Format_OutputIteratorRef<t_CHAR> Format_VFormatImpl(
    Format_OutputIteratorRef<t_CHAR> out,
    bsl::basic_string_view<t_CHAR>   fmtstr,
    const basic_format_args<
        basic_format_context<Format_OutputIteratorRef<t_CHAR>, t_CHAR> >& args)
{
    Format_VFormatProcess(out, fmtstr, args);
    return out;
}

template <class t_OUT, class t_CHAR, class t_CONTEXT>
t_OUT Format_VFormatImpl(t_OUT                               out,
                         bsl::basic_string_view<t_CHAR>      fmtstr,
                         const basic_format_args<t_CONTEXT>& args)
{
    Format_OutputIteratorImpl<t_CHAR, t_OUT> wrappedOut(out);
    Format_OutputIteratorRef<t_CHAR>         wrappedOutRef(&wrappedOut);
    Format_VFormatProcess(wrappedOutRef, fmtstr, args);
    return out;
}

template <class t_OUT>
t_OUT vformat_to(t_OUT out, bsl::string_view fmtstr, format_args args)
{
    return Format_VFormatImpl(out, fmtstr, args);
}


template <class t_OUT>
t_OUT vformat_to(t_OUT out, bsl::wstring_view fmtstr, wformat_args args)
{
    return Format_VFormatImpl(out, fmtstr, args);
}

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatimp.h
#ifndef BSLFMT_FORMATIMP_VARIADIC_LIMIT
#define BSLFMT_FORMATIMP_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATIMP_VARIADIC_LIMIT_A
#define BSLFMT_FORMATIMP_VARIADIC_LIMIT_A BSLFMT_FORMATIMP_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
template <class t_OUT>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr)
{
    return vformat_to(out, fmtstr.get(), make_format_args());
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_OUT, class t_ARGS_01>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05,
                                                          args_06));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05,
                                                          args_06,
                                                          args_07));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05,
                                                          args_06,
                                                          args_07,
                                                          args_08));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08,
          const t_ARGS_09& args_09)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05,
                                                          args_06,
                                                          args_07,
                                                          args_08,
                                                          args_09));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09,
                       class t_ARGS_10>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08,
          const t_ARGS_09& args_09,
          const t_ARGS_10& args_10)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args_01,
                                                          args_02,
                                                          args_03,
                                                          args_04,
                                                          args_05,
                                                          args_06,
                                                          args_07,
                                                          args_08,
                                                          args_09,
                                                          args_10));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
template <class t_OUT>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args());
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_OUT, class t_ARGS_01>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05,
                                                           args_06));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05,
                                                           args_06,
                                                           args_07));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05,
                                                           args_06,
                                                           args_07,
                                                           args_08));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08,
          const t_ARGS_09& args_09)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05,
                                                           args_06,
                                                           args_07,
                                                           args_08,
                                                           args_09));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09,
                       class t_ARGS_10>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS_01& args_01,
          const t_ARGS_02& args_02,
          const t_ARGS_03& args_03,
          const t_ARGS_04& args_04,
          const t_ARGS_05& args_05,
          const t_ARGS_06& args_06,
          const t_ARGS_07& args_07,
          const t_ARGS_08& args_08,
          const t_ARGS_09& args_09,
          const t_ARGS_10& args_10)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args_01,
                                                           args_02,
                                                           args_03,
                                                           args_04,
                                                           args_05,
                                                           args_06,
                                                           args_07,
                                                           args_08,
                                                           args_09,
                                                           args_10));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args());
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08,
               const t_ARGS_09& args_09)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08,
                                                                     args_09));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08,
               const t_ARGS_09& args_09,
               const t_ARGS_10& args_10)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08,
                                                                     args_09,
                                                                     args_10));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args());
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08,
               const t_ARGS_09& args_09)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08,
                                                                     args_09));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS_01& args_01,
               const t_ARGS_02& args_02,
               const t_ARGS_03& args_03,
               const t_ARGS_04& args_04,
               const t_ARGS_05& args_05,
               const t_ARGS_06& args_06,
               const t_ARGS_07& args_07,
               const t_ARGS_08& args_08,
               const t_ARGS_09& args_09,
               const t_ARGS_10& args_10)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(
                                                                     args_01,
                                                                     args_02,
                                                                     args_03,
                                                                     args_04,
                                                                     args_05,
                                                                     args_06,
                                                                     args_07,
                                                                     args_08,
                                                                     args_09,
                                                                     args_10));
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


inline
void vformat_to(bsl::string *out, bsl::string_view fmtstr, format_args args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr, args);
}

inline
void vformat_to(bsl::wstring *out, bsl::wstring_view fmtstr, wformat_args args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr, args);
}

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args());
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08,
                   const t_ARGS_09& args_09)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08,
                                                       args_09));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08,
                   const t_ARGS_09& args_09,
                   const t_ARGS_10& args_10)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08,
                                                       args_09,
                                                       args_10));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args());
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08,
                    const t_ARGS_09& args_09)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08,
                                                        args_09));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08,
                    const t_ARGS_09& args_09,
                    const t_ARGS_10& args_10)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08,
                                                        args_09,
                                                        args_10));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args());
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08,
                   const t_ARGS_09& args_09)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08,
                                                       args_09));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS_01& args_01,
                   const t_ARGS_02& args_02,
                   const t_ARGS_03& args_03,
                   const t_ARGS_04& args_04,
                   const t_ARGS_05& args_05,
                   const t_ARGS_06& args_06,
                   const t_ARGS_07& args_07,
                   const t_ARGS_08& args_08,
                   const t_ARGS_09& args_09,
                   const t_ARGS_10& args_10)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args_01,
                                                       args_02,
                                                       args_03,
                                                       args_04,
                                                       args_05,
                                                       args_06,
                                                       args_07,
                                                       args_08,
                                                       args_09,
                                                       args_10));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10



#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args());
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08,
                    const t_ARGS_09& args_09)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08,
                                                        args_09));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS_01& args_01,
                    const t_ARGS_02& args_02,
                    const t_ARGS_03& args_03,
                    const t_ARGS_04& args_04,
                    const t_ARGS_05& args_05,
                    const t_ARGS_06& args_06,
                    const t_ARGS_07& args_07,
                    const t_ARGS_08& args_08,
                    const t_ARGS_09& args_09,
                    const t_ARGS_10& args_10)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args_01,
                                                        args_02,
                                                        args_03,
                                                        args_04,
                                                        args_05,
                                                        args_06,
                                                        args_07,
                                                        args_08,
                                                        args_09,
                                                        args_10));
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


inline
bsl::string vformat(bsl::string_view fmt, format_args args)
{
    bsl::string result;
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::wstring vformat(bsl::wstring_view fmt, wformat_args args)
{
    bsl::wstring result;
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::string vformat(bsl::allocator<char> alloc,
                    bsl::string_view     fmt,
                    format_args          args)
{
    bsl::string result(alloc);
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::wstring vformat(bsl::allocator<wchar_t> alloc,
                     bsl::wstring_view       fmt,
                     wformat_args            args)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmt, args);
    return result;
}

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08,
                           const t_ARGS_09& args_09)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08,
                           const t_ARGS_09& args_09,
                           const t_ARGS_10& args_10)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10



#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08,
                           const t_ARGS_09& args_09)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS_01& args_01,
                           const t_ARGS_02& args_02,
                           const t_ARGS_03& args_03,
                           const t_ARGS_04& args_04,
                           const t_ARGS_05& args_05,
                           const t_ARGS_06& args_06,
                           const t_ARGS_07& args_07,
                           const t_ARGS_08& args_08,
                           const t_ARGS_09& args_09,
                           const t_ARGS_10& args_10)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08,
                      const t_ARGS_09& args_09)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08,
                      const t_ARGS_09& args_09,
                      const t_ARGS_10& args_10)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_ARGS_01>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08,
                      const t_ARGS_09& args_09)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS_01& args_01,
                      const t_ARGS_02& args_02,
                      const t_ARGS_03& args_03,
                      const t_ARGS_04& args_04,
                      const t_ARGS_05& args_05,
                      const t_ARGS_06& args_06,
                      const t_ARGS_07& args_07,
                      const t_ARGS_08& args_08,
                      const t_ARGS_09& args_09,
                      const t_ARGS_10& args_10)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);
    return end.count();
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
template <class t_OUT>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_OUT, class t_ARGS_01>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08,
            const t_ARGS_09& args_09)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09,
                       class t_ARGS_10>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08,
            const t_ARGS_09& args_09,
            const t_ARGS_10& args_10)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10


#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0
template <class t_OUT>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1
template <class t_OUT, class t_ARGS_01>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08,
            const t_ARGS_09& args_09)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10
template <class t_OUT, class t_ARGS_01,
                       class t_ARGS_02,
                       class t_ARGS_03,
                       class t_ARGS_04,
                       class t_ARGS_05,
                       class t_ARGS_06,
                       class t_ARGS_07,
                       class t_ARGS_08,
                       class t_ARGS_09,
                       class t_ARGS_10>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS_01& args_01,
            const t_ARGS_02& args_02,
            const t_ARGS_03& args_03,
            const t_ARGS_04& args_04,
            const t_ARGS_05& args_05,
            const t_ARGS_06& args_06,
            const t_ARGS_07& args_07,
            const t_ARGS_08& args_08,
            const t_ARGS_09& args_09,
            const t_ARGS_10& args_10)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args_01,
                                                    args_02,
                                                    args_03,
                                                    args_04,
                                                    args_05,
                                                    args_06,
                                                    args_07,
                                                    args_08,
                                                    args_09,
                                                    args_10);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
#endif  // BSLFMT_FORMATIMP_VARIADIC_LIMIT_A >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_OUT, class... t_ARGS>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    t_OUT>::type
format_to(t_OUT                          out,
          BSLFMT_FORMAT_STRING_PARAMETER fmtstr,
          const t_ARGS&...               args)
{
    return vformat_to(out, fmtstr.get(), make_format_args(args...));
}

template <class t_OUT, class... t_ARGS>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    t_OUT>::type
format_to(t_OUT                           out,
          BSLFMT_FORMAT_WSTRING_PARAMETER fmtstr,
          const t_ARGS&...                args)
{
    return vformat_to(out, fmtstr.get(), make_wformat_args(args...));
}

template <class... t_ARGS>
void format_to(bsl::string                      *out,
               BSLFMT_FORMAT_STRING_PARAMETER    fmtstr,
               const t_ARGS&...                  args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_format_args(args...));
}

template <class... t_ARGS>
void format_to(bsl::wstring                      *out,
               BSLFMT_FORMAT_WSTRING_PARAMETER    fmtstr,
               const t_ARGS&...                   args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr.get(), make_wformat_args(args...));
}

inline
void vformat_to(bsl::string *out, bsl::string_view fmtstr, format_args args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr, args);
}

inline
void vformat_to(bsl::wstring *out, bsl::wstring_view fmtstr, wformat_args args)
{
    vformat_to(bsl::back_inserter(*out), fmtstr, args);
}

template <class... t_ARGS>
bsl::string format(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS&...                 args)
{
    bsl::string result;
    vformat_to(&result, fmtstr.get(), make_format_args(args...));
    return result;
}

template <class... t_ARGS>
bsl::wstring format(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS&...                  args)
{
    bsl::wstring result;
    vformat_to(&result, fmtstr.get(), make_wformat_args(args...));
    return result;
}

template <class... t_ARGS>
bsl::string format(bsl::allocator<char>             alloc,
                   BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                   const t_ARGS&...                 args)
{
    bsl::string result(alloc);
    vformat_to(&result, fmtstr.get(), make_format_args(args...));
    return result;
}


template <class... t_ARGS>
bsl::wstring format(bsl::allocator<wchar_t>           alloc,
                    BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                    const t_ARGS&...                  args)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmtstr.get(), make_wformat_args(args...));
    return result;
}

inline
bsl::string vformat(bsl::string_view fmt, format_args args)
{
    bsl::string result;
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::wstring vformat(bsl::wstring_view fmt, wformat_args args)
{
    bsl::wstring result;
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::string vformat(bsl::allocator<char> alloc,
                    bsl::string_view     fmt,
                    format_args          args)
{
    bsl::string result(alloc);
    vformat_to(&result, fmt, args);
    return result;
}

inline
bsl::wstring vformat(bsl::allocator<wchar_t> alloc,
                     bsl::wstring_view       fmt,
                     wformat_args            args)
{
    bsl::wstring result(alloc);
    vformat_to(&result, fmt, args);
    return result;
}

template <class... t_ARGS>
std::size_t formatted_size(BSLFMT_FORMAT_STRING_PARAMETER   fmtstr,
                           const t_ARGS&...                 args)
{
    typedef Format_TruncatingIterator<char*, char, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args...);
    return end.count();
}


template <class... t_ARGS>
std::size_t formatted_size(BSLFMT_FORMAT_WSTRING_PARAMETER   fmtstr,
                           const t_ARGS&...                  args)
{
    typedef Format_TruncatingIterator<wchar_t*, wchar_t, ptrdiff_t>
                        truncating_iterator;

    truncating_iterator it(0, 0);
    truncating_iterator end = format_to(it, fmtstr, args...);
    return end.count();
}

template <class... t_ARGS>
ptrdiff_t format_to_n(bsl::string                    *out,
                      ptrdiff_t                       n,
                      BSLFMT_FORMAT_STRING_PARAMETER  fmtstr,
                      const t_ARGS&...                args)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::string>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, char, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args...);
    return end.count();
}

template <class... t_ARGS>
ptrdiff_t format_to_n(bsl::wstring                    *out,
                      ptrdiff_t                        n,
                      BSLFMT_FORMAT_WSTRING_PARAMETER  fmtstr,
                      const t_ARGS&...                 args)
{
    if (n < 0)
        n = 0;
    out->clear();

    typedef std::back_insert_iterator<bsl::wstring>
                        underlying_iterator;
    typedef Format_TruncatingIterator<underlying_iterator, wchar_t, ptrdiff_t>
                        truncating_iterator;

    underlying_iterator bit = std::back_inserter(*out);
    truncating_iterator it(bit, n);

    truncating_iterator end = format_to(it, fmtstr, args...);
    return end.count();
}

template <class t_OUT, class... t_ARGS>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::string *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_STRING_PARAMETER                        fmtstr,
            const t_ARGS&...                                      args)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args...);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}

template <class t_OUT, class... t_ARGS>
typename bsl::enable_if<
    !bsl::is_same<typename bsl::decay<t_OUT>::type, bsl::wstring *>::value,
    format_to_n_result<t_OUT> >::type
format_to_n(t_OUT                                                 out,
            typename bsl::iterator_traits<t_OUT>::difference_type n,
            BSLFMT_FORMAT_WSTRING_PARAMETER                       fmtstr,
            const t_ARGS&...                                      args)
{
    if (n < 0)
        n = 0;

    typedef Format_TruncatingIterator<
        t_OUT,
        typename bsl::iterator_traits<t_OUT>::value_type,
        typename bsl::iterator_traits<t_OUT>::difference_type>
        truncating_iterator;

    truncating_iterator it(out, n);

    truncating_iterator end = format_to(it, fmtstr, args...);

    format_to_n_result<t_OUT> result;
    result.out  = end.underlying();
    result.size = end.count();
    return result;
}
// }}} END GENERATED CODE
#endif
}  // close namespace bslfmt
} // close enterprise namespace

#undef BSLFMT_FORMAT_STRING_PARAMETER
#undef BSLFMT_FORMAT_WSTRING_PARAMETER

#else // if ! defined(DEFINED_BSLFMT_FORMATIMP_H)
# error Not valid except when included from bslfmt_formatimp.h
#endif // ! defined(COMPILING_BSLFMT_FORMATIMP_H)

#endif // ! defined(INCLUDED_BSLFMT_FORMATIMP_CPP03)

// ----------------------------------------------------------------------------
// Copyright 2023 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------
