// bslfmt_formatarg_cpp03.h                                           -*-C++-*-

// Automatically generated file.  **DO NOT EDIT**

#ifndef INCLUDED_BSLFMT_FORMATARG_CPP03
#define INCLUDED_BSLFMT_FORMATARG_CPP03

//@PURPOSE: Provide C++03 implementation for bslfmt_formatarg.h
//
//@CLASSES: See bslfmt_formatarg.h for list of classes
//
//@SEE_ALSO: bslfmt_formatarg
//
//@DESCRIPTION:  This component is the C++03 translation of a C++11 component,
// generated by the 'sim_cpp11_features.pl' program.  If the original header
// contains any specially delimited regions of C++11 code, then this generated
// file contains the C++03 equivalent, i.e., with variadic templates expanded
// and rvalue-references replaced by 'bslmf::MovableRef' objects.  The header
// code in this file is designed to be '#include'd into the original header
// when compiling with a C++03 compiler.  If there are no specially delimited
// regions of C++11 code, then this header contains no code and is not
// '#include'd in the original header.
//
// Generated on Wed Jul  3 12:21:13 2024
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h

#ifdef COMPILING_BSLFMT_FORMATARG_H

namespace BloombergLP {
namespace bslfmt {

// FORWARD DECLARATIONS

template <class t_CHAR>
class basic_format_parse_context;

template <class t_OUT, class t_CHAR>
class basic_format_context;

template <class t_CONTEXT>
class basic_format_arg;

template <class t_VALUE>
class Format_OutputIteratorRef;

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT
#define BSLFMT_FORMATARG_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT_A
#define BSLFMT_FORMATARG_VARIADIC_LIMIT_A BSLFMT_FORMATARG_VARIADIC_LIMIT
#endif
template <class t_CONTEXT
#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 0
        , class t_ARGS_0 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 1
        , class t_ARGS_1 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 2
        , class t_ARGS_2 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 3
        , class t_ARGS_3 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 4
        , class t_ARGS_4 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 5
        , class t_ARGS_5 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 6
        , class t_ARGS_6 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 7
        , class t_ARGS_7 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 8
        , class t_ARGS_8 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 9
        , class t_ARGS_9 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_A >= 9
        , class = BSLS_COMPILERFEATURES_NILT>
class Format_FormatArgStore;

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT, class... t_ARGS>
class Format_FormatArgStore;
// }}} END GENERATED CODE
#endif

// TYPEDEFS

typedef basic_format_context<Format_OutputIteratorRef<char>, char>
    format_context;

typedef basic_format_context<Format_OutputIteratorRef<wchar_t>, wchar_t>
    wformat_context;

                   // -------------------------------------
                   // class basic_format_arg<t_OUT, T_CHAR>
                   // -------------------------------------

template <class t_OUT, class t_CHAR>
class basic_format_arg<basic_format_context<t_OUT, t_CHAR> > {
  public:
    // TYPES
    class handle {
      private:
        // DATA
        const void *d_value_p;

        void (*d_format_impl_p)(basic_format_parse_context<t_CHAR>&,
                                basic_format_context<t_OUT, t_CHAR>&,
                                const void *);

        // FRIENDS
        friend class basic_format_arg<basic_format_context<t_OUT, t_CHAR> >;

        // PRIVATE CLASS METHODS
        template <class t_TYPE>
        static void format_impl(basic_format_parse_context<t_CHAR>&   pc,
                                basic_format_context<t_OUT, t_CHAR>&  fc,
                                const void                           *value);

        // PRIVATE CREATORS
        template <class t_TYPE>
        explicit handle(const t_TYPE& value) BSLS_KEYWORD_NOEXCEPT;

      public:
        // CREATORS
        handle(bslmf::MovableRef<handle> rhs) BSLS_KEYWORD_NOEXCEPT;

        // ACCESSORS
        void format(basic_format_parse_context<t_CHAR>&  pc,
                    basic_format_context<t_OUT, t_CHAR>& fc) const;
    };

    typedef
        typename BloombergLP::bsls::UnspecifiedBool<basic_format_arg>::BoolType
            BoolType;

  private:
    // PRIVATE TYPES
    typedef t_CHAR char_type;

    typedef bsl::variant<bsl::monostate,
                 bool,
                 char_type,
                 int,
                 unsigned,
                 long long,
                 unsigned long long,
                 float,
                 double,
                 long double,
                 const char_type *,
                 bsl::basic_string_view<char_type>,
                 const void *,
                 handle>
        variant_type;

    // DATA
    variant_type    d_value;

    // FRIENDS
#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT
#define BSLFMT_FORMATARG_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT_B
#define BSLFMT_FORMATARG_VARIADIC_LIMIT_B BSLFMT_FORMATARG_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 0
    template <class t_CONTEXT>
    friend Format_FormatArgStore<t_CONTEXT> Format_MakeFormatArgs(
                                                          );
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 1
    template <class t_CONTEXT, class t_ARGS_01>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 2
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 3
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 4
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 5
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 6
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 7
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 8
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 9
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08,
                               class t_ARGS_09>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 10
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08,
                               class t_ARGS_09,
                               class t_ARGS_10>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09,
                                            t_ARGS_10> Format_MakeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 10


#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 0
    template <class t_CONTEXT>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  0u> *out);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 1
    template <class t_CONTEXT, class t_FMTARGS_01>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  1u> *out,
                 t_FMTARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 2
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  2u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 3
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  3u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 4
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  4u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 5
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  5u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 6
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05,
                               class t_FMTARGS_06>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  6u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05,
                 t_FMTARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 7
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05,
                               class t_FMTARGS_06,
                               class t_FMTARGS_07>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  7u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05,
                 t_FMTARGS_06& fmt_args_06,
                 t_FMTARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 8
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05,
                               class t_FMTARGS_06,
                               class t_FMTARGS_07,
                               class t_FMTARGS_08>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  8u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05,
                 t_FMTARGS_06& fmt_args_06,
                 t_FMTARGS_07& fmt_args_07,
                 t_FMTARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 9
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05,
                               class t_FMTARGS_06,
                               class t_FMTARGS_07,
                               class t_FMTARGS_08,
                               class t_FMTARGS_09>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>,  9u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05,
                 t_FMTARGS_06& fmt_args_06,
                 t_FMTARGS_07& fmt_args_07,
                 t_FMTARGS_08& fmt_args_08,
                 t_FMTARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 10
    template <class t_CONTEXT, class t_FMTARGS_01,
                               class t_FMTARGS_02,
                               class t_FMTARGS_03,
                               class t_FMTARGS_04,
                               class t_FMTARGS_05,
                               class t_FMTARGS_06,
                               class t_FMTARGS_07,
                               class t_FMTARGS_08,
                               class t_FMTARGS_09,
                               class t_FMTARGS_10>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>, 10u> *out,
                 t_FMTARGS_01& fmt_args_01,
                 t_FMTARGS_02& fmt_args_02,
                 t_FMTARGS_03& fmt_args_03,
                 t_FMTARGS_04& fmt_args_04,
                 t_FMTARGS_05& fmt_args_05,
                 t_FMTARGS_06& fmt_args_06,
                 t_FMTARGS_07& fmt_args_07,
                 t_FMTARGS_08& fmt_args_08,
                 t_FMTARGS_09& fmt_args_09,
                 t_FMTARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_B >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
    template <class t_CONTEXT, class... t_ARGS>
    friend Format_FormatArgStore<t_CONTEXT, t_ARGS...> Format_MakeFormatArgs(
                                                          t_ARGS&... fmt_args);

    template <class t_CONTEXT, class... t_FMTARGS>
    friend void
    Format_MakeFormatArgArray(
             bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_FMTARGS)> *out,
                 t_FMTARGS&... fmt_args);
// }}} END GENERATED CODE
#endif

    // PRIVATE CREATORS
    explicit basic_format_arg(bool value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(char_type value) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TYPE>
    explicit basic_format_arg(
           t_TYPE value,
           typename bsl::enable_if<bsl::is_same<t_TYPE, char>::value &&
                                   bsl::is_same<char_type, wchar_t>::value,
                                   int>::type = 0) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TYPE>
    explicit basic_format_arg(
               t_TYPE value,
               typename bsl::enable_if<bsl::is_integral<t_TYPE>::value &&
                                       (sizeof(t_TYPE) <= sizeof(long long)),
                                       int>::type = 0) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TYPE>
    explicit basic_format_arg(
              const t_TYPE& value,
              typename bsl::enable_if<!bsl::is_integral<t_TYPE>::value ||
                                      (sizeof(t_TYPE) > sizeof(long long)),
                                      int>::type = 0) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(float value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(double value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(long double value) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TRAITS>
    explicit basic_format_arg(
      bsl::basic_string_view<char_type, t_TRAITS> value) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TRAITS, class t_ALLOC>
    explicit basic_format_arg(bsl::basic_string<char_type, t_TRAITS, t_ALLOC>&
                                  value) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TRAITS, class t_ALLOC>
    explicit basic_format_arg(
                  const bsl::basic_string<char_type, t_TRAITS, t_ALLOC>& value)
        BSLS_KEYWORD_NOEXCEPT;

    template <class t_TRAITS, class t_ALLOC>
    explicit basic_format_arg(std::basic_string<char_type, t_TRAITS, t_ALLOC>&
                                  value) BSLS_KEYWORD_NOEXCEPT;

    template <class t_TRAITS, class t_ALLOC>
    explicit basic_format_arg(
                  const std::basic_string<char_type, t_TRAITS, t_ALLOC>& value)
        BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(char_type *value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(const char_type *value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(void *value) BSLS_KEYWORD_NOEXCEPT;

    explicit basic_format_arg(const void *value) BSLS_KEYWORD_NOEXCEPT;

#if defined(BSLS_COMPILERFEATURES_SUPPORT_NULLPTR)
    explicit basic_format_arg(std::nullptr_t) BSLS_KEYWORD_NOEXCEPT;
#endif

    // HIDDEN FRIENDS
    friend void swap(basic_format_arg& lhs, basic_format_arg& rhs)
        // Exchange the values of the specified 'lhs' and 'rhs'.
    {
        lhs.d_value.swap(rhs.d_value);
    }

  public:
    // CREATORS
    basic_format_arg() BSLS_KEYWORD_NOEXCEPT;

    // ACCESSORS
    operator BoolType() const BSLS_KEYWORD_NOEXCEPT;

    // MANIPULATORS

    // BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE is a proxy for
    // BSL_VARIANT_FULL_IMPLEMENTATION which is unset at the end of
    // bslstl_variant.h
#ifdef BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE
    template <class t_VISITOR>
    decltype(auto) visit(t_VISITOR&& visitor);
#else
    template <class t_VISITOR>
    typename bsl::invoke_result<t_VISITOR&, bsl::monostate&>::type visit(
                                                           t_VISITOR& visitor);
#endif
};


// FREE FUNCTIONS

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT
#define BSLFMT_FORMATARG_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT_C
#define BSLFMT_FORMATARG_VARIADIC_LIMIT_C BSLFMT_FORMATARG_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 0
template <class t_CONTEXT>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  0u> *out)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> tmp = {
        {}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 1
template <class t_CONTEXT, class t_FMTARGS_01>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  1u> *out,
          t_FMTARGS_01& fmt_args_01)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 2
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  2u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 3
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  3u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 4
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  4u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 5
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  5u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 6
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05,
                           class t_FMTARGS_06>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  6u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05,
          t_FMTARGS_06& fmt_args_06)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 7
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05,
                           class t_FMTARGS_06,
                           class t_FMTARGS_07>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  7u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05,
          t_FMTARGS_06& fmt_args_06,
          t_FMTARGS_07& fmt_args_07)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 8
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05,
                           class t_FMTARGS_06,
                           class t_FMTARGS_07,
                           class t_FMTARGS_08>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  8u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05,
          t_FMTARGS_06& fmt_args_06,
          t_FMTARGS_07& fmt_args_07,
          t_FMTARGS_08& fmt_args_08)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 9
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05,
                           class t_FMTARGS_06,
                           class t_FMTARGS_07,
                           class t_FMTARGS_08,
                           class t_FMTARGS_09>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>,  9u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05,
          t_FMTARGS_06& fmt_args_06,
          t_FMTARGS_07& fmt_args_07,
          t_FMTARGS_08& fmt_args_08,
          t_FMTARGS_09& fmt_args_09)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08),
         basic_format_arg<t_CONTEXT>(fmt_args_09)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 10
template <class t_CONTEXT, class t_FMTARGS_01,
                           class t_FMTARGS_02,
                           class t_FMTARGS_03,
                           class t_FMTARGS_04,
                           class t_FMTARGS_05,
                           class t_FMTARGS_06,
                           class t_FMTARGS_07,
                           class t_FMTARGS_08,
                           class t_FMTARGS_09,
                           class t_FMTARGS_10>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>, 10u> *out,
          t_FMTARGS_01& fmt_args_01,
          t_FMTARGS_02& fmt_args_02,
          t_FMTARGS_03& fmt_args_03,
          t_FMTARGS_04& fmt_args_04,
          t_FMTARGS_05& fmt_args_05,
          t_FMTARGS_06& fmt_args_06,
          t_FMTARGS_07& fmt_args_07,
          t_FMTARGS_08& fmt_args_08,
          t_FMTARGS_09& fmt_args_09,
          t_FMTARGS_10& fmt_args_10)
{
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08),
         basic_format_arg<t_CONTEXT>(fmt_args_09),
         basic_format_arg<t_CONTEXT>(fmt_args_10)}};
    out->swap(tmp);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_C >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT, class... t_FMTARGS>
void Format_MakeFormatArgArray(
          bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_FMTARGS)> *out,
          t_FMTARGS&...                                                  fmt_args)
{
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_FMTARGS)> tmp = {
        {basic_format_arg<t_CONTEXT>(fmt_args)...}};
    out->swap(tmp);
}
// }}} END GENERATED CODE
#endif

                 // ------------------------------------------
                 // class Format_FormatArgStore<t_OUT, T_CHAR>
                 // ------------------------------------------


#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT
#define BSLFMT_FORMATARG_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT_D
#define BSLFMT_FORMATARG_VARIADIC_LIMIT_D BSLFMT_FORMATARG_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0
template <class t_CONTEXT>
class Format_FormatArgStore<t_CONTEXT> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT>
    friend Format_FormatArgStore<t_INNER_CONTEXT>
        Format_MakeFormatArgs();

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  0u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1
template <class t_CONTEXT, class t_ARGS_01>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  1u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  2u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  3u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  4u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  5u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  6u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  7u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  8u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08,
                                     class t_INNER_ARGS_09>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08,
                                                  t_INNER_ARGS_09>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08,
                              t_INNER_ARGS_09& fmt_args_09);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  9u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
class Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class t_INNER_ARGS_01,
                                     class t_INNER_ARGS_02,
                                     class t_INNER_ARGS_03,
                                     class t_INNER_ARGS_04,
                                     class t_INNER_ARGS_05,
                                     class t_INNER_ARGS_06,
                                     class t_INNER_ARGS_07,
                                     class t_INNER_ARGS_08,
                                     class t_INNER_ARGS_09,
                                     class t_INNER_ARGS_10>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS_01,
                                                  t_INNER_ARGS_02,
                                                  t_INNER_ARGS_03,
                                                  t_INNER_ARGS_04,
                                                  t_INNER_ARGS_05,
                                                  t_INNER_ARGS_06,
                                                  t_INNER_ARGS_07,
                                                  t_INNER_ARGS_08,
                                                  t_INNER_ARGS_09,
                                                  t_INNER_ARGS_10>
        Format_MakeFormatArgs(t_INNER_ARGS_01& fmt_args_01,
                              t_INNER_ARGS_02& fmt_args_02,
                              t_INNER_ARGS_03& fmt_args_03,
                              t_INNER_ARGS_04& fmt_args_04,
                              t_INNER_ARGS_05& fmt_args_05,
                              t_INNER_ARGS_06& fmt_args_06,
                              t_INNER_ARGS_07& fmt_args_07,
                              t_INNER_ARGS_08& fmt_args_08,
                              t_INNER_ARGS_09& fmt_args_09,
                              t_INNER_ARGS_10& fmt_args_10);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, 10u>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10



#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0
template <class t_CONTEXT>
Format_FormatArgStore<t_CONTEXT>
Format_MakeFormatArgs()
{
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT>(&arg_array);
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> arg_array2 = {
        {}};
    return Format_FormatArgStore<t_CONTEXT>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1
template <class t_CONTEXT, class t_ARGS_01>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01>(&arg_array, fmt_args_01);
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02>(&arg_array, fmt_args_01,
                                                                fmt_args_02);
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03);
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04);
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05);
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05,
                      t_ARGS_06& fmt_args_06)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06);
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05,
                      t_ARGS_06& fmt_args_06,
                      t_ARGS_07& fmt_args_07)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07);
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05,
                      t_ARGS_06& fmt_args_06,
                      t_ARGS_07& fmt_args_07,
                      t_ARGS_08& fmt_args_08)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08);
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05,
                      t_ARGS_06& fmt_args_06,
                      t_ARGS_07& fmt_args_07,
                      t_ARGS_08& fmt_args_08,
                      t_ARGS_09& fmt_args_09)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08,
                                         t_ARGS_09>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08,
                                                                fmt_args_09);
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08),
         basic_format_arg<t_CONTEXT>(fmt_args_09)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10>
Format_MakeFormatArgs(t_ARGS_01& fmt_args_01,
                      t_ARGS_02& fmt_args_02,
                      t_ARGS_03& fmt_args_03,
                      t_ARGS_04& fmt_args_04,
                      t_ARGS_05& fmt_args_05,
                      t_ARGS_06& fmt_args_06,
                      t_ARGS_07& fmt_args_07,
                      t_ARGS_08& fmt_args_08,
                      t_ARGS_09& fmt_args_09,
                      t_ARGS_10& fmt_args_10)
{
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                         t_ARGS_02,
                                         t_ARGS_03,
                                         t_ARGS_04,
                                         t_ARGS_05,
                                         t_ARGS_06,
                                         t_ARGS_07,
                                         t_ARGS_08,
                                         t_ARGS_09,
                                         t_ARGS_10>(&arg_array, fmt_args_01,
                                                                fmt_args_02,
                                                                fmt_args_03,
                                                                fmt_args_04,
                                                                fmt_args_05,
                                                                fmt_args_06,
                                                                fmt_args_07,
                                                                fmt_args_08,
                                                                fmt_args_09,
                                                                fmt_args_10);
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args_01),
         basic_format_arg<t_CONTEXT>(fmt_args_02),
         basic_format_arg<t_CONTEXT>(fmt_args_03),
         basic_format_arg<t_CONTEXT>(fmt_args_04),
         basic_format_arg<t_CONTEXT>(fmt_args_05),
         basic_format_arg<t_CONTEXT>(fmt_args_06),
         basic_format_arg<t_CONTEXT>(fmt_args_07),
         basic_format_arg<t_CONTEXT>(fmt_args_08),
         basic_format_arg<t_CONTEXT>(fmt_args_09),
         basic_format_arg<t_CONTEXT>(fmt_args_10)}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                            t_ARGS_02,
                                            t_ARGS_03,
                                            t_ARGS_04,
                                            t_ARGS_05,
                                            t_ARGS_06,
                                            t_ARGS_07,
                                            t_ARGS_08,
                                            t_ARGS_09,
                                            t_ARGS_10>(arg_array);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10


#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0
Format_FormatArgStore<format_context>
make_format_args()
{
    return Format_MakeFormatArgs<format_context>();
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1
template <class t_ARGS_01>
Format_FormatArgStore<format_context, t_ARGS_01>
make_format_args(t_ARGS_01& fmt_args_01)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05,
                 t_ARGS_06& fmt_args_06)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05,
                 t_ARGS_06& fmt_args_06,
                 t_ARGS_07& fmt_args_07)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05,
                 t_ARGS_06& fmt_args_06,
                 t_ARGS_07& fmt_args_07,
                 t_ARGS_08& fmt_args_08)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05,
                 t_ARGS_06& fmt_args_06,
                 t_ARGS_07& fmt_args_07,
                 t_ARGS_08& fmt_args_08,
                 t_ARGS_09& fmt_args_09)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08,
                                                 fmt_args_09);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<format_context, t_ARGS_01,
                                      t_ARGS_02,
                                      t_ARGS_03,
                                      t_ARGS_04,
                                      t_ARGS_05,
                                      t_ARGS_06,
                                      t_ARGS_07,
                                      t_ARGS_08,
                                      t_ARGS_09,
                                      t_ARGS_10>
make_format_args(t_ARGS_01& fmt_args_01,
                 t_ARGS_02& fmt_args_02,
                 t_ARGS_03& fmt_args_03,
                 t_ARGS_04& fmt_args_04,
                 t_ARGS_05& fmt_args_05,
                 t_ARGS_06& fmt_args_06,
                 t_ARGS_07& fmt_args_07,
                 t_ARGS_08& fmt_args_08,
                 t_ARGS_09& fmt_args_09,
                 t_ARGS_10& fmt_args_10)
{
    return Format_MakeFormatArgs<format_context>(fmt_args_01,
                                                 fmt_args_02,
                                                 fmt_args_03,
                                                 fmt_args_04,
                                                 fmt_args_05,
                                                 fmt_args_06,
                                                 fmt_args_07,
                                                 fmt_args_08,
                                                 fmt_args_09,
                                                 fmt_args_10);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10


#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0
Format_FormatArgStore<wformat_context>
make_wformat_args()
{
    return Format_MakeFormatArgs<wformat_context>();
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1
template <class t_ARGS_01>
Format_FormatArgStore<wformat_context, t_ARGS_01>
make_wformat_args(t_ARGS_01& fmt_args_01)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05,
                  t_ARGS_06& fmt_args_06)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05,
                  t_ARGS_06& fmt_args_06,
                  t_ARGS_07& fmt_args_07)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05,
                  t_ARGS_06& fmt_args_06,
                  t_ARGS_07& fmt_args_07,
                  t_ARGS_08& fmt_args_08)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05,
                  t_ARGS_06& fmt_args_06,
                  t_ARGS_07& fmt_args_07,
                  t_ARGS_08& fmt_args_08,
                  t_ARGS_09& fmt_args_09)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08,
                                                  fmt_args_09);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_FormatArgStore<wformat_context, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10>
make_wformat_args(t_ARGS_01& fmt_args_01,
                  t_ARGS_02& fmt_args_02,
                  t_ARGS_03& fmt_args_03,
                  t_ARGS_04& fmt_args_04,
                  t_ARGS_05& fmt_args_05,
                  t_ARGS_06& fmt_args_06,
                  t_ARGS_07& fmt_args_07,
                  t_ARGS_08& fmt_args_08,
                  t_ARGS_09& fmt_args_09,
                  t_ARGS_10& fmt_args_10)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args_01,
                                                  fmt_args_02,
                                                  fmt_args_03,
                                                  fmt_args_04,
                                                  fmt_args_05,
                                                  fmt_args_06,
                                                  fmt_args_07,
                                                  fmt_args_08,
                                                  fmt_args_09,
                                                  fmt_args_10);
}
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_D >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT, class... t_ARGS>
class Format_FormatArgStore {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    template <class t_INNER_CONTEXT, class... t_INNER_ARGS>
    friend Format_FormatArgStore<t_INNER_CONTEXT, t_INNER_ARGS...>
        Format_MakeFormatArgs(t_INNER_ARGS&... fmt_args);

    explicit Format_FormatArgStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)>& args)
        BSLS_KEYWORD_NOEXCEPT : d_args(args)
    {
    }
};


template <class t_CONTEXT, class... t_ARGS>
Format_FormatArgStore<t_CONTEXT, t_ARGS...>
Format_MakeFormatArgs(t_ARGS&... fmt_args)
{
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> arg_array;
    Format_MakeFormatArgArray<t_CONTEXT, t_ARGS...>(&arg_array, fmt_args...);
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> arg_array2 = {
        {basic_format_arg<t_CONTEXT>(fmt_args)...}};
    return Format_FormatArgStore<t_CONTEXT, t_ARGS...>(arg_array);
}

template <class... t_ARGS>
Format_FormatArgStore<format_context, t_ARGS...>
make_format_args(t_ARGS&... fmt_args)
{
    return Format_MakeFormatArgs<format_context>(fmt_args...);
}

template <class... t_ARGS>
Format_FormatArgStore<wformat_context, t_ARGS...>
make_wformat_args(t_ARGS&... fmt_args)
{
    return Format_MakeFormatArgs<wformat_context>(fmt_args...);
}
// }}} END GENERATED CODE
#endif


                     // ----------------------------------
                     // class basic_format_args<t_CONTEXT>
                     // ----------------------------------


template <class t_CONTEXT>
class basic_format_args {
    // DATA
    size_t                             d_size;
    const basic_format_arg<t_CONTEXT> *d_data;

  public:

    // CREATORS
    basic_format_args() BSLS_KEYWORD_NOEXCEPT
    : d_size(0) {}

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_formatarg.h
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT
#define BSLFMT_FORMATARG_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMATARG_VARIADIC_LIMIT_E
#define BSLFMT_FORMATARG_VARIADIC_LIMIT_E BSLFMT_FORMATARG_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 0
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 0u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 0

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 1
    template <class t_ARGS_01>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 1u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 1

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 2
    template <class t_ARGS_01,
              class t_ARGS_02>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 2u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 2

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 3
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 3u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 3

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 4
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 4u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 4

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 5
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 5u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 5

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 6
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05,
                                                      t_ARGS_06>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 6u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 6

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 7
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05,
                                                      t_ARGS_06,
                                                      t_ARGS_07>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 7u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 7

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 8
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05,
                                                      t_ARGS_06,
                                                      t_ARGS_07,
                                                      t_ARGS_08>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 8u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 8

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 9
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05,
                                                      t_ARGS_06,
                                                      t_ARGS_07,
                                                      t_ARGS_08,
                                                      t_ARGS_09>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size( 9u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 9

#if BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 10
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09,
              class t_ARGS_10>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS_01,
                                                      t_ARGS_02,
                                                      t_ARGS_03,
                                                      t_ARGS_04,
                                                      t_ARGS_05,
                                                      t_ARGS_06,
                                                      t_ARGS_07,
                                                      t_ARGS_08,
                                                      t_ARGS_09,
                                                      t_ARGS_10>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size(10u),
      d_data(store.d_args.data())
    {
    }
#endif  // BSLFMT_FORMATARG_VARIADIC_LIMIT_E >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
    template <class... t_ARGS>
    basic_format_args(
               const Format_FormatArgStore<t_CONTEXT, t_ARGS...>& store)
        BSLS_KEYWORD_NOEXCEPT
    : d_size(sizeof...(t_ARGS)),
      d_data(store.d_args.data())
    {
    }
// }}} END GENERATED CODE
#endif

    // ACCESSORS
    basic_format_arg<t_CONTEXT> get(size_t i) const BSLS_KEYWORD_NOEXCEPT
    {
        return i < d_size ? d_data[i] : basic_format_arg<t_CONTEXT>();
    }

  private:
    // PRIVATE ACCESSORS
    size_t size() const
    {
        return d_size;
    }

    // FRIENDS
    template <class t_INNER_CONTEXT>
    friend size_t Format_FormatArgsSize(
            const basic_format_args<t_INNER_CONTEXT>& args);
};

typedef basic_format_args<format_context> format_args;

typedef basic_format_args<wformat_context> wformat_args;

template<class t_CONTEXT>
size_t Format_FormatArgsSize(const basic_format_args<t_CONTEXT>& args)
    // This component-private function returns the result of calling 'size()'
    // on the specified 'args' parameter. This is to permit access to the
    // private 'size' accessor of 'basic_format_args' without requiring long
    // distance friendship.
{
    return args.size();
}

// BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE is a proxy for
// BSL_VARIANT_FULL_IMPLEMENTATION which is unset at the end of
// bslstl_variant.h
#ifdef BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE
template <class t_VISITOR, class t_CONTEXT>
decltype(auto) visit_format_arg(t_VISITOR&&                 visitor,
                                basic_format_arg<t_CONTEXT> arg)
{
    return arg.visit(std::forward<t_VISITOR>(visitor));
}
#else
template <class t_VISITOR, class t_CONTEXT>
typename bsl::invoke_result<t_VISITOR&, bsl::monostate&>::type
visit_format_arg(t_VISITOR& visitor, basic_format_arg<t_CONTEXT> arg)
{
    return arg.visit(visitor);
}
#endif

// ============================================================================
//                           INLINE DEFINITIONS
// ============================================================================

               // ---------------------------------------------
               // class basic_format_arg<t_OUT, T_CHAR>::handle
               // ---------------------------------------------

// PRIVATE CLASS METHODS
template <class t_OUT, class t_CHAR>
template <class t_TYPE>
void
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::handle::format_impl(
                                   basic_format_parse_context<t_CHAR>&   pc,
                                   basic_format_context<t_OUT, t_CHAR>&  fc,
                                   const void                           *value)
{
    bsl::formatter<t_TYPE, t_CHAR> f;
    pc.advance_to(f.parse(pc));
    fc.advance_to(f.format(*static_cast<const t_TYPE *>(value), fc));
}

// PRIVATE CREATORS
template <class t_OUT, class t_CHAR>
template <class t_TYPE>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::handle::handle(
                                     const t_TYPE& value) BSLS_KEYWORD_NOEXCEPT
: d_value_p(BSLS_UTIL_ADDRESSOF(value))
, d_format_impl_p(format_impl<t_TYPE>)
{
}

// CREATORS
template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::handle::handle(
                           bslmf::MovableRef<handle> rhs) BSLS_KEYWORD_NOEXCEPT
{
    d_value_p = bslmf::MovableRefUtil::move(
                           bslmf::MovableRefUtil::access(rhs).d_value_p);
    d_format_impl_p = bslmf::MovableRefUtil::move(
                           bslmf::MovableRefUtil::access(rhs).d_format_impl_p);
}

// ACCESSORS
template <class t_OUT, class t_CHAR>
void basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::handle::format(
                                 basic_format_parse_context<t_CHAR>&  pc,
                                 basic_format_context<t_OUT, t_CHAR>& fc) const
{
    d_format_impl_p(pc, fc, d_value_p);
}

                   // -------------------------------------
                   // class basic_format_arg<t_OUT, T_CHAR>
                   // -------------------------------------

// MANIPULATORS

// BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE is a proxy for
// BSL_VARIANT_FULL_IMPLEMENTATION which is unset at the end of
// bslstl_variant.h
#ifdef BSLS_LIBRARYFEATURES_HAS_CPP14_INTEGER_SEQUENCE
template <class t_OUT, class t_CHAR>
template <class t_VISITOR>
decltype(auto) basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::visit(
                                                                 t_VISITOR&& v)
{
    return bsl::visit(std::forward<t_VISITOR>(v), d_value);
}
#else
template <class t_OUT, class t_CHAR>
template <class t_VISITOR>
typename bsl::invoke_result<t_VISITOR&, bsl::monostate&>::type
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::visit(t_VISITOR& v)
{
    return bsl::visit(v, d_value);
}
#endif

// PRIVATE CREATORS
template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                              bool value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                         char_type value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
template <class t_TYPE>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
           t_TYPE value,
           typename bsl::enable_if<bsl::is_same<t_TYPE, char>::value &&
                                   bsl::is_same<char_type, wchar_t>::value,
                                   int>::type) BSLS_KEYWORD_NOEXCEPT
{
    static const std::ctype<wchar_t>& ct =
                  std::use_facet<std::ctype<wchar_t> >(std::locale::classic());
    d_value = ct.widen(value);
}

template <class t_OUT, class t_CHAR>
template <class t_TYPE>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
               t_TYPE value,
               typename bsl::enable_if<bsl::is_integral<t_TYPE>::value &&
                                       (sizeof(t_TYPE) <= sizeof(long long)),
                                       int>::type) BSLS_KEYWORD_NOEXCEPT
{
    if (static_cast<t_TYPE>(-1) < static_cast<t_TYPE>(0)) {
        // 't_TYPE' is signed
        if (sizeof(t_TYPE) <= sizeof(int)) {
            d_value.template emplace<int>(value);
        }
        else {
            d_value.template emplace<long long>(value);
        }
    }
    else {
        // 't_TYPE' is unsigned
        if (sizeof(t_TYPE) <= sizeof(int)) {
            d_value.template emplace<unsigned int>(value);
        }
        else {
            d_value.template emplace<unsigned long long>(value);
        }
    }
}

template <class t_OUT, class t_CHAR>
template <class t_TYPE>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
              const t_TYPE& value,
              typename bsl::enable_if<!bsl::is_integral<t_TYPE>::value ||
                                      (sizeof(t_TYPE) > sizeof(long long)),
                                      int>::type) BSLS_KEYWORD_NOEXCEPT
: d_value(handle(value))
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                             float value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                            double value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                       long double value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
template <class t_TRAITS>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
       bsl::basic_string_view<char_type, t_TRAITS> value) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<bsl::basic_string_view<char_type> >(value))
{
}

template <class t_OUT, class t_CHAR>
template <class t_TRAITS, class t_ALLOC>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
  bsl::basic_string<char_type, t_TRAITS, t_ALLOC>& value) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<bsl::basic_string_view<char_type> >(value))
{
}

template <class t_OUT, class t_CHAR>
template <class t_TRAITS, class t_ALLOC>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                  const bsl::basic_string<char_type, t_TRAITS, t_ALLOC>& value)
    BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<bsl::basic_string_view<char_type> >(value))
{
}

template <class t_OUT, class t_CHAR>
template <class t_TRAITS, class t_ALLOC>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
  std::basic_string<char_type, t_TRAITS, t_ALLOC>& value) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<bsl::basic_string_view<char_type> >(value))
{
}

template <class t_OUT, class t_CHAR>
template <class t_TRAITS, class t_ALLOC>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                  const std::basic_string<char_type, t_TRAITS, t_ALLOC>& value)
    BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<bsl::basic_string_view<char_type> >(value))
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                        char_type *value) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<const char_type *>(value))
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                  const char_type *value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                             void *value) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<const void *>(value))
{
}

template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                       const void *value) BSLS_KEYWORD_NOEXCEPT
: d_value(value)
{
}

#if defined(BSLS_COMPILERFEATURES_SUPPORT_NULLPTR)
template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg(
                                          std::nullptr_t) BSLS_KEYWORD_NOEXCEPT
: d_value(static_cast<const void *>(nullptr))
{
}
#endif



// CREATORS
template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::basic_format_arg()
    BSLS_KEYWORD_NOEXCEPT
{
}

// ACCESSORS
template <class t_OUT, class t_CHAR>
basic_format_arg<basic_format_context<t_OUT, t_CHAR> >::operator BoolType()
    const BSLS_KEYWORD_NOEXCEPT
{
    return BoolType::makeValue(
                             !bsl::holds_alternative<bsl::monostate>(d_value));
}

}  // close namespace bslfmt
} // close enterprise namespace

#else // if ! defined(DEFINED_BSLFMT_FORMATARG_H)
# error Not valid except when included from bslfmt_formatarg.h
#endif // ! defined(COMPILING_BSLFMT_FORMATARG_H)

#endif // ! defined(INCLUDED_BSLFMT_FORMATARG_CPP03)

// ----------------------------------------------------------------------------
// Copyright 2023 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------
